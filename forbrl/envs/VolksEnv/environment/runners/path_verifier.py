import logging
import threading
import time

import cv2

from .registry import RUNNERS


@RUNNERS.register_module
class PathVerifier:
    """
    A verifier that goes through all poses that generated by path sampler
    without stopping while streaming. Used for verify that for all poses,
    the camera can see the target.
    """
    logger = logging.getLogger(__name__)

    def __init__(self, arm=None, cam=None, path_generator=None,
                 delay=5, acc=2, vel=2, radius=0.01):
        self.arm = arm
        self.cam = cam
        self.path_generator = path_generator
        self.delay = delay
        self.move_controls = {'acc': acc, 'vel': vel, 'radius': radius}
        self.logger.debug(f"Initialized {self.__class__.__name__}:\n"
                          f" {self.__repr__()}")

    def __repr__(self):
        msg = (f"A path verifier with:\n"
               f"    arm:{self.arm}\n"
               f"    camera:{self.cam}\n"
               f"    path_generator:{self.path_generator}\n")
        return msg

    def streaming(self):
        self.cam.start()
        try:
            while True:
                color_img, depth_img = self.cam.capture()
                cv2.namedWindow("camera feed", cv2.WINDOW_AUTOSIZE)
                cv2.imshow("camera feed", color_img)

                key = cv2.waitKey(1)
                # Press esc or 'q' to close the image window
                if key & 0xFF == ord('q') or key == 27:
                    cv2.destroyAllWindows()
                    break
        finally:
            self.cam.stop()

    def moving(self):
        points = list(self.path_generator.path_by_grid())
        points.extend(list(reversed(points)))
        time.sleep(self.delay)
        self.arm.movejs(points[:-1], **self.move_controls)
        time.sleep(self.delay)
        self.arm.close()

    def run(self):
        thread_arm = threading.Thread(target=self.moving)
        self.logger.debug(f"Arm thread created with: {self.arm}")
        thread_cam = threading.Thread(target=self.streaming)
        self.logger.debug(f"Cam thread created with: {self.cam}")

        thread_cam.start()
        thread_arm.start()
        self.logger.info("Threads created... Started running.")

        thread_cam.join()
        thread_arm.join()
        self.logger.info("Finished.")
